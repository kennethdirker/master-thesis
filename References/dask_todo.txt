Tree form:
Client
	Reader 
		Convert file to dependency tree
			Read CWL
				Step to object
				Workflow to object
				objects to dependency tree
			Read Python
				Req: Determine Python format
					Step to object
					Workflow to object
					objects to dependency tree
	Runner
		Optimize
			Group serializable steps into single container
		Executing dependency trees
			Execute step
			Resource manager
				Load files to mount on correct node
				Update resource manager with outputs
			Containers
				Start containers (if none available)
				Stop containers (or reuse)
			Chain step inputs/outputs
			Execute grouped steps
			Create Dask.Delayed graph
			Execute Dask.Delayed graph
	Transpiler
		Convert dependency tree to Python format
			Req: Determine Python format
			Expand supported scripting capabilities (Process function)

            Runner
	Execute step with DASK
	Define input and output classes
	Execute chain of steps
	Container management with Singularity
	Container input and output
	Resource manager that keeps track of which node has what data
	
===============================================================================

In order:
Reader
	Load CWL step into python object
	Load CWL workflow into dependency tree

Determine Python workflow format
Reader
	Read Python step format into python object
	Read Python workflow format into dependency tree

Transpiler
	Convert dependency tree to Python workflow format
	
Runner
	Optimization by nesting serializable steps into a "single" step object 
	Execute nested step
		
Transpiler
	Expand supported scripting capabilities by assigning script function in Python workflow format

Runner 
	Optimization by reusing containers